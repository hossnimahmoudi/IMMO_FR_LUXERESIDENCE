from __future__ import print_function

import string
from os.path import join, exists, abspath
from shutil import move

import neukolln
from scrapy.commands.startproject import Command as ScrapyStartprojectCommand
from scrapy.exceptions import UsageError
from scrapy.utils.template import render_templatefile, string_camelcase

TEMPLATES_TO_RENDER = (
    ('scrapy.cfg',),
    ('${project_name}', 'settings.py.tmpl'),
    #('${project_name}', 'items.py.tmpl'),
    #('${project_name}', 'pipelines.py.tmpl'),
    #('${project_name}', 'middlewares.py.tmpl'),
    ('${project_name}', 'spiders/spiders.py.tmpl')
)


class Command(ScrapyStartprojectCommand):
    """This class inherits from the 'ScrapyCommand' class and will be automatically detected as a Scrapy command line"""

    def short_desc(self):
        return "Create new Scrapy project [NEUKOLLN]"

    def run(self, args, opts):
        if len(args) not in (1, 2):
            raise UsageError()

        project_name = args[0]
        project_dir = args[0]

        if len(args) == 2:
            project_dir = args[1]

        if exists(join(project_dir, 'scrapy.cfg')):
            self.exitcode = 1
            print('Error: scrapy.cfg already exists in %s' % abspath(project_dir))
            return

        if not self._is_valid_name(project_name):
            self.exitcode = 1
            return

        # Variables to fill in the templates
        module = project_name + "_spider"
        name = module.lower()
        tvars = {
            'project_name': project_name,
            'ProjectName': string_camelcase(project_name),
            'module': module,
            'name': name,
            #'domain': domain,
            'classname': '%s' % ''.join(s.capitalize() for s in module.split('_'))
        }

        self._copytree(self.templates_dir, abspath(project_dir))
        move(join(project_dir, 'module'), join(project_dir, project_name))
        for paths in TEMPLATES_TO_RENDER:
            path = join(*paths)
            tplfile = join(project_dir, string.Template(path).substitute(project_name=project_name))
            render_templatefile(tplfile, **tvars)

        print("New Scrapy project %r, using template directory %r, created in:" % (project_name, self.templates_dir))
        print("    %s\n" % abspath(project_dir))

    @property
    def templates_dir(self):
        # Look for templates
        # The ones from the 'neukolln' - not scrapy - lib
        _neukolln_path = neukolln.__path__[0]
        # Or the ones within the scrapy project
        # _templates_base_dir = self.settings['TEMPLATES_DIR'] or join(_neukolln_path, 'templates')
        _templates_base_dir = join(_neukolln_path, 'templates')
        return join(_templates_base_dir, 'project')