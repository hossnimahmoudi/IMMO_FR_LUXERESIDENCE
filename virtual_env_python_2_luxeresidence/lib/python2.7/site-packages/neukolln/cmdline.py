from __future__ import print_function

import cProfile
import inspect
import optparse
import sys

import neukolln
import pkg_resources
from scrapy.cmdline import _get_commands_from_module, _pop_command_name, _run_print_help, _run_command
from scrapy.crawler import CrawlerProcess
from scrapy.settings.deprecated import check_deprecated_settings
from scrapy.utils.project import inside_project, get_project_settings


# Get commands from CUSTOM ENTRY POINT here =====> 'neukolln.commands'
def _get_commands_from_entry_points(inproject, group='neukolln.commands'):
    cmds = {}
    for entry_point in pkg_resources.iter_entry_points(group):
        obj = entry_point.load()
        if inspect.isclass(obj):
            cmds[entry_point.name] = obj()
        else:
            raise Exception("Invalid entry point %s" % entry_point.name)
    return cmds


# Get commands from CUSTOM MODULE here =====> 'neukolln.commands'
def _get_commands_dict(settings, inproject):
    cmds = _get_commands_from_module('neukolln.commands', inproject)
    cmds.update(_get_commands_from_entry_points(inproject))
    cmds_module = settings['COMMANDS_MODULE']
    if cmds_module:
        cmds.update(_get_commands_from_module(cmds_module, inproject))
    return cmds


# Print CUSTOM HEADER with version from the extension =====> ```neukolln.__version__```
def _print_header(settings, inproject):
    if inproject:
        print("Neukolln %s - project: %s\n" % (neukolln.__version__, settings['BOT_NAME']))
    else:
        print("Neukolln %s - no active project\n" % neukolln.__version__)


# Print CUSTOM COMMANDS MESSAGE in the terminal =====> 'Usage: neukolln ...'
def _print_commands(settings, inproject):
    _print_header(settings, inproject)
    print("Usage:")
    print("  neukolln <command> [options] [args]\n")
    print("Available commands:")
    cmds = _get_commands_dict(settings, inproject)
    for cmdname, cmdclass in sorted(cmds.items()):
        print("  %-13s %s" % (cmdname, cmdclass.short_desc()))
    if not inproject:
        print()
        print("  [ more ]      More commands available when run from project directory")
    print()
    print('Use "neukolln <command> -h" to see more info about a command')


# Print CUSTOM UNKNOWN COMMAND MESSAGE in the terminal =====> 'Unknown command: ... Use: "neukolln" ...'
def _print_unknown_command(settings, cmdname, inproject):
    _print_header(settings, inproject)
    print("Unknown command: %s\n" % cmdname)
    print('Use "neukolln" to see available commands')


# CUSTOM MAIN EXECUTION FUNCTION =====> ```parser.usage = "neukolln ..."``
def execute(argv=None, settings=None):
    if argv is None:
        argv = sys.argv

    # --- backwards compatibility for scrapy.conf.settings singleton ---
    if settings is None and 'scrapy.conf' in sys.modules:
        from scrapy import conf
        if hasattr(conf, 'settings'):
            settings = conf.settings
    # ------------------------------------------------------------------

    if settings is None:
        settings = get_project_settings()
    check_deprecated_settings(settings)

    # --- backwards compatibility for scrapy.conf.settings singleton ---
    import warnings
    from scrapy.exceptions import ScrapyDeprecationWarning
    with warnings.catch_warnings():
        warnings.simplefilter("ignore", ScrapyDeprecationWarning)
        from scrapy import conf
        conf.settings = settings
    # ------------------------------------------------------------------

    inproject = inside_project()
    cmds = _get_commands_dict(settings, inproject)
    cmdname = _pop_command_name(argv)
    parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), conflict_handler='resolve')
    if not cmdname:
        _print_commands(settings, inproject)
        sys.exit(0)
    elif cmdname not in cmds:
        _print_unknown_command(settings, cmdname, inproject)
        sys.exit(2)

    cmd = cmds[cmdname]
    parser.usage = "neukolln %s %s" % (cmdname, cmd.syntax())
    parser.description = cmd.long_desc()
    settings.setdict(cmd.default_settings, priority='command')
    cmd.settings = settings
    cmd.add_options(parser)
    opts, args = parser.parse_args(args=argv[1:])
    _run_print_help(parser, cmd.process_options, args, opts)

    cmd.crawler_process = CrawlerProcess(settings)
    _run_print_help(parser, _run_command, cmd, args, opts)
    sys.exit(cmd.exitcode)


# CUSTOM RUN COMMAND PROFILED FUNCTION =====> "neukolln: writing cProfile stats..."
def _run_command_profiled(cmd, args, opts):
    if opts.profile:
        sys.stderr.write("neukolln: writing cProfile stats to %r\n" % opts.profile)
    loc = locals()
    p = cProfile.Profile()
    p.runctx('cmd.run(args, opts)', globals(), loc)
    if opts.profile:
        p.dump_stats(opts.profile)


if __name__ == '__main__':
    execute()
